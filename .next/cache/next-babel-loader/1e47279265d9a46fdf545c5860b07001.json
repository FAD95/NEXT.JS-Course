{"ast":null,"code":"import _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport 'isomorphic-fetch';\nimport Link from 'next/link';\nimport Layout from '../components/Layout';\nimport PodcastList from '../components/PodcastList';\nimport ChannelGrid from '../components/ChannelGrid';\nimport Error from '../_error';\nexport default class extends React.Component {\n  static async getInitialProps({\n    query,\n    res\n  }) {\n    try {\n      let idChannel = query.id;\n      let [reqChannel, reqAudios, reqSeries] = await Promise.all([fetch(`https://api.audioboom.com/channels/${idChannel}`), fetch(`https://api.audioboom.com/channels/${idChannel}/audio_clips`), fetch(`https://api.audioboom.com/channels/${idChannel}/child_channels`)]);\n\n      if (reqChannel.status >= 400) {\n        res.statusCode = reqChannel.status;\n        return {\n          channel: null,\n          audio_clips: null,\n          series: null,\n          statusCode: reqChannel.status\n        };\n      } //   Llama el canal con el id especificado\n\n\n      let dataChannel = await reqChannel.json();\n      let channel = dataChannel.body.channel; //   LLama los archivos de audio principales del podcast\n\n      let dataAudios = await reqAudios.json();\n      let audio_clips = dataAudios.body.audio_clips; //   LLama los archivos de audio de subseries del podcast\n\n      let dataSeries = await reqSeries.json();\n      let series = dataSeries.body.channels;\n      return {\n        channel,\n        audio_clips,\n        series,\n        statusCode: 200\n      };\n    } catch (e) {\n      return {\n        channel: null,\n        audio_clips: null,\n        series: null,\n        statusCode: 503\n      };\n    }\n  }\n\n  render() {\n    const {\n      channel,\n      audio_clips,\n      series,\n      statusCode\n    } = this.props;\n\n    if (statusCode !== 200) {\n      return __jsx(Error, {\n        statusCode: statusCode\n      });\n    }\n\n    return __jsx(Layout, {\n      title: channel.title\n    }, channel.urls.banner_image.original != null ? __jsx(\"img\", {\n      src: channel.urls.banner_image.original,\n      alt: `${channel.title} banner`,\n      className: \"jsx-1949514689\" + \" \" + \"banner\"\n    }) : __jsx(\"div\", {\n      className: \"jsx-1949514689\" + \" \" + \"defaultBanner\"\n    }, __jsx(\"h1\", {\n      className: \"jsx-1949514689\"\n    }, channel.title)), __jsx(\"div\", {\n      className: \"jsx-1949514689\" + \" \" + \"descriptionContainer\"\n    }, __jsx(\"p\", {\n      className: \"jsx-1949514689\" + \" \" + \"description\"\n    }, channel.description)), audio_clips > [] ? __jsx(PodcastList, {\n      audio_clips: audio_clips\n    }) : null, series > [] ? __jsx(ChannelGrid, {\n      channels: series,\n      language: \"Series\"\n    }) : null, __jsx(_JSXStyle, {\n      id: \"1949514689\"\n    }, [\".defaultBanner.jsx-1949514689{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;background-color:#2a0a22;box-shadow:0 0 15px 0 rgba(0,0,0,0.5);}\", \".defaultBanner.jsx-1949514689 h1.jsx-1949514689{font-size:7em;text-align:center;color:#bbb;}\", \".banner.jsx-1949514689{width:100%;}\", \".descriptionContainer.jsx-1949514689{border-radius:40px;background-color:#2a0a22;max-height:150px;max-width:500px;margin:2em auto;padding:1em 2em;box-shadow:3px 4px 3px rgba(0,0,0,0.5);}\", \".description.jsx-1949514689{max-height:100px;overflow-y:scroll;text-align:center;color:#eee;}\"]));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}