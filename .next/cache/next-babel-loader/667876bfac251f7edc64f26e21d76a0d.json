{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport 'isomorphic-fetch';\nimport Layout from '../components/Layout';\nimport ChannelGrid from '../components/ChannelGrid';\nimport Error from '../_error';\n\nvar _default = /*#__PURE__*/function (_React$Component) {\n  _inherits(_default, _React$Component);\n\n  var _super = _createSuper(_default);\n\n  function _default() {\n    _classCallCheck(this, _default);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(_default, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          english = _this$props.english,\n          spanish = _this$props.spanish,\n          statusCode = _this$props.statusCode;\n\n      if (statusCode !== 200) {\n        return __jsx(Error, {\n          statusCode: statusCode\n        });\n      }\n\n      return __jsx(Layout, {\n        title: \"Podcasts\"\n      }, __jsx(ChannelGrid, {\n        language: \"English\",\n        channels: english\n      }), __jsx(ChannelGrid, {\n        language: \"Spanish\",\n        channels: spanish\n      }));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function getInitialProps(_ref) {\n      var res, _await$Promise$all, _await$Promise$all2, reqEnglish, reqSpanish, dataEnglish, english, dataSpanish, spanish;\n\n      return _regeneratorRuntime.async(function getInitialProps$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              res = _ref.res;\n              _context.prev = 1;\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(Promise.all([fetch('https://api.audioboom.com/channels/recommended'), fetch(\"https://api.audioboom.com/channels/recommended?category_ids[]=179\")]));\n\n            case 4:\n              _await$Promise$all = _context.sent;\n              _await$Promise$all2 = _slicedToArray(_await$Promise$all, 2);\n              reqEnglish = _await$Promise$all2[0];\n              reqSpanish = _await$Promise$all2[1];\n\n              if (!(reqEnglish.status >= 400)) {\n                _context.next = 11;\n                break;\n              }\n\n              res.statusCode = reqEnglish.status;\n              return _context.abrupt(\"return\", {\n                english: null,\n                spanish: null,\n                statusCode: reqEnglish.status\n              });\n\n            case 11:\n              if (!(reqSpanish.status >= 400)) {\n                _context.next = 14;\n                break;\n              }\n\n              res.statusCode = reqSpanish.status;\n              return _context.abrupt(\"return\", {\n                english: null,\n                spanish: null,\n                statusCode: reqSpanish.status\n              });\n\n            case 14:\n              _context.next = 16;\n              return _regeneratorRuntime.awrap(reqEnglish.json());\n\n            case 16:\n              dataEnglish = _context.sent;\n              english = dataEnglish.body;\n              _context.next = 20;\n              return _regeneratorRuntime.awrap(reqSpanish.json());\n\n            case 20:\n              dataSpanish = _context.sent;\n              spanish = dataSpanish.body;\n              return _context.abrupt(\"return\", {\n                english: english,\n                spanish: spanish,\n                statusCode: 200\n              });\n\n            case 25:\n              _context.prev = 25;\n              _context.t0 = _context[\"catch\"](1);\n              res.statusCode = 503;\n              return _context.abrupt(\"return\", {\n                english: null,\n                spanish: null,\n                statusCode: 503\n              });\n\n            case 29:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[1, 25]], Promise);\n    }\n  }]);\n\n  return _default;\n}(React.Component);\n\nexport { _default as default };","map":null,"metadata":{},"sourceType":"module"}