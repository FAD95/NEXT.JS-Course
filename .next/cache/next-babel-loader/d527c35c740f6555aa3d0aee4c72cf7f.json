{"ast":null,"code":"var _jsxFileName = \"/home/fad/Desarrollo/platzi/next.js/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport 'isomorphic-fetch';\nimport Layout from '../components/Layout';\nimport ChannelGrid from '../components/ChannelGrid';\nexport default class extends React.Component {\n  static async getInitialProps() {\n    try {\n      let [reqEnglish, reqSpanish] = await Promise.all([fetch('https://api.audioboom.com/channels/recommended'), fetch(`https://api.audioboom.com/channels/recommended?category_ids[]=179`)]); //   Llama el canal con el id especificado\n\n      let dataEnglish = await reqEnglish.json();\n      let english = dataEnglish.body;\n      let dataSpanish = await reqSpanish.json();\n      let spanish = dataSpanish.body;\n      return {\n        english,\n        spanish,\n        statusCode: 200\n      };\n    } catch (e) {\n      return {\n        english: null,\n        spanish: null,\n        statusCode: 503\n      };\n    }\n  }\n\n  render() {\n    const {\n      english,\n      spanish,\n      statusCode\n    } = this.props;\n\n    if (statusCode !== 200) {\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 14\n        }\n      }, \"Se break the servidor\");\n    }\n\n    return __jsx(Layout, {\n      title: \"Podcasts\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 7\n      }\n    }, __jsx(ChannelGrid, {\n      language: \"English\",\n      channels: english,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }\n    }), __jsx(ChannelGrid, {\n      language: \"Spanish\",\n      channels: spanish,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/home/fad/Desarrollo/platzi/next.js/pages/index.js"],"names":["Layout","ChannelGrid","React","Component","getInitialProps","reqEnglish","reqSpanish","Promise","all","fetch","dataEnglish","json","english","body","dataSpanish","spanish","statusCode","e","render","props"],"mappings":";;;AAAA,OAAO,kBAAP;AACA,OAAOA,MAAP,MAAmB,sBAAnB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,eAAe,cAAcC,KAAK,CAACC,SAApB,CAA8B;AAC3C,eAAaC,eAAb,GAA+B;AAC7B,QAAI;AACF,UAAI,CAACC,UAAD,EAAaC,UAAb,IAA2B,MAAMC,OAAO,CAACC,GAAR,CAAY,CAC/CC,KAAK,CAAC,gDAAD,CAD0C,EAE/CA,KAAK,CACF,mEADE,CAF0C,CAAZ,CAArC,CADE,CAQF;;AACA,UAAIC,WAAW,GAAG,MAAML,UAAU,CAACM,IAAX,EAAxB;AACA,UAAIC,OAAO,GAAGF,WAAW,CAACG,IAA1B;AACA,UAAIC,WAAW,GAAG,MAAMR,UAAU,CAACK,IAAX,EAAxB;AACA,UAAII,OAAO,GAAGD,WAAW,CAACD,IAA1B;AAEA,aAAO;AAAED,QAAAA,OAAF;AAAWG,QAAAA,OAAX;AAAoBC,QAAAA,UAAU,EAAE;AAAhC,OAAP;AACD,KAfD,CAeE,OAAOC,CAAP,EAAU;AACV,aAAO;AACLL,QAAAA,OAAO,EAAE,IADJ;AAELG,QAAAA,OAAO,EAAE,IAFJ;AAGLC,QAAAA,UAAU,EAAE;AAHP,OAAP;AAKD;AACF;;AAEDE,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEN,MAAAA,OAAF;AAAWG,MAAAA,OAAX;AAAoBC,MAAAA;AAApB,QAAmC,KAAKG,KAA9C;;AACA,QAAIH,UAAU,KAAK,GAAnB,EAAwB;AACtB,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAAP;AACD;;AACD,WACE,MAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,WAAD;AAAa,MAAA,QAAQ,EAAC,SAAtB;AAAgC,MAAA,QAAQ,EAAEJ,OAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,MAAC,WAAD;AAAa,MAAA,QAAQ,EAAC,SAAtB;AAAgC,MAAA,QAAQ,EAAEG,OAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF;AAMD;;AArC0C","sourcesContent":["import 'isomorphic-fetch'\nimport Layout from '../components/Layout'\nimport ChannelGrid from '../components/ChannelGrid'\nexport default class extends React.Component {\n  static async getInitialProps() {\n    try {\n      let [reqEnglish, reqSpanish] = await Promise.all([\n        fetch('https://api.audioboom.com/channels/recommended'),\n        fetch(\n          `https://api.audioboom.com/channels/recommended?category_ids[]=179`\n        )\n      ])\n\n      //   Llama el canal con el id especificado\n      let dataEnglish = await reqEnglish.json()\n      let english = dataEnglish.body\n      let dataSpanish = await reqSpanish.json()\n      let spanish = dataSpanish.body\n\n      return { english, spanish, statusCode: 200 }\n    } catch (e) {\n      return {\n        english: null,\n        spanish: null,\n        statusCode: 503\n      }\n    }\n  }\n\n  render() {\n    const { english, spanish, statusCode } = this.props\n    if (statusCode !== 200) {\n      return <div>Se break the servidor</div>\n    }\n    return (\n      <Layout title=\"Podcasts\">\n        <ChannelGrid language=\"English\" channels={english}></ChannelGrid>\n        <ChannelGrid language=\"Spanish\" channels={spanish}></ChannelGrid>\n      </Layout>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}