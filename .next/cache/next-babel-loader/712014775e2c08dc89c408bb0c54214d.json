{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/fad/Desarrollo/platzi/next.js/components/ChannelGrid.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nvar ChannelGrid = /*#__PURE__*/function (_React$Component) {\n  _inherits(ChannelGrid, _React$Component);\n\n  var _super = _createSuper(ChannelGrid);\n\n  function ChannelGrid() {\n    _classCallCheck(this, ChannelGrid);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ChannelGrid, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var language = this.props.language;\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 7\n        }\n      }, __jsx(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 9\n        }\n      }, language), __jsx(\"div\", {\n        className: \"channels\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 9\n        }\n      }, language.map(function (channel) {\n        return __jsx(\"div\", {\n          key: channel.id,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 13\n          }\n        }, __jsx(Link, {\n          href: \"/channel?id=\".concat(channel.id),\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 15\n          }\n        }, __jsx(\"a\", {\n          className: \"channel\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 17\n          }\n        }, __jsx(\"img\", {\n          src: channel.urls.logo_image.original,\n          alt: \"channel logo\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 19\n          }\n        }))), __jsx(\"h2\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 15\n          }\n        }, channel.title));\n      })));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function getInitialProps() {\n      var _await$Promise$all, _await$Promise$all2, reqEnglish, reqSpanish, dataEnglish, english, dataSpanish, spanish;\n\n      return _regeneratorRuntime.async(function getInitialProps$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Promise.all([fetch('https://api.audioboom.com/channels/recommended'), fetch(\"https://api.audioboom.com/channels/recommended?category_ids[]=179\")]));\n\n            case 2:\n              _await$Promise$all = _context.sent;\n              _await$Promise$all2 = _slicedToArray(_await$Promise$all, 2);\n              reqEnglish = _await$Promise$all2[0];\n              reqSpanish = _await$Promise$all2[1];\n              _context.next = 8;\n              return _regeneratorRuntime.awrap(reqEnglish.json());\n\n            case 8:\n              dataEnglish = _context.sent;\n              english = dataEnglish.body;\n              _context.next = 12;\n              return _regeneratorRuntime.awrap(reqSpanish.json());\n\n            case 12:\n              dataSpanish = _context.sent;\n              spanish = dataSpanish.body;\n              return _context.abrupt(\"return\", {\n                english: english,\n                spanish: spanish\n              });\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }]);\n\n  return ChannelGrid;\n}(React.Component);\n\nexport { ChannelGrid as default };","map":{"version":3,"sources":["/home/fad/Desarrollo/platzi/next.js/components/ChannelGrid.js"],"names":["ChannelGrid","language","props","map","channel","id","urls","logo_image","original","title","Promise","all","fetch","reqEnglish","reqSpanish","json","dataEnglish","english","body","dataSpanish","spanish","React","Component"],"mappings":";;;;;;;;;;;;;;;IAAqBA,W;;;;;;;;;;;;;6BAeV;AAAA;;AAAA,UACCC,QADD,GACc,KAAKC,KADnB,CACCD,QADD;AAGP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKA,QAAL,CADF,EAEE;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGA,QAAQ,CAACE,GAAT,CAAa,UAACC,OAAD;AAAA,eACZ;AAAK,UAAA,GAAG,EAAEA,OAAO,CAACC,EAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,MAAC,IAAD;AAAM,UAAA,IAAI,wBAAiBD,OAAO,CAACC,EAAzB,CAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAG,UAAA,SAAS,EAAC,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AACE,UAAA,GAAG,EAAED,OAAO,CAACE,IAAR,CAAaC,UAAb,CAAwBC,QAD/B;AAEE,UAAA,GAAG,EAAC,cAFN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CADF,CADF,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAKJ,OAAO,CAACK,KAAb,CATF,CADY;AAAA,OAAb,CADH,CAFF,CADF;AAoBD;;;;;;;;;;;+CApCsCC,OAAO,CAACC,GAAR,CAAY,CAC/CC,KAAK,CAAC,gDAAD,CAD0C,EAE/CA,KAAK,qEAF0C,CAAZ,C;;;;;AAAhCC,cAAAA,U;AAAYC,cAAAA,U;;+CAMOD,UAAU,CAACE,IAAX,E;;;AAApBC,cAAAA,W;AACAC,cAAAA,O,GAAUD,WAAW,CAACE,I;;+CACFJ,UAAU,CAACC,IAAX,E;;;AAApBI,cAAAA,W;AACAC,cAAAA,O,GAAUD,WAAW,CAACD,I;+CAEnB;AAAED,gBAAAA,OAAO,EAAPA,OAAF;AAAWG,gBAAAA,OAAO,EAAPA;AAAX,e;;;;;;;;;;;;EAb8BC,KAAK,CAACC,S;;SAA1BtB,W","sourcesContent":["export default class ChannelGrid extends React.Component {\n  static async getInitialProps() {\n    let [reqEnglish, reqSpanish] = await Promise.all([\n      fetch('https://api.audioboom.com/channels/recommended'),\n      fetch(`https://api.audioboom.com/channels/recommended?category_ids[]=179`)\n    ])\n\n    //   Llama el canal con el id especificado\n    let dataEnglish = await reqEnglish.json()\n    let english = dataEnglish.body\n    let dataSpanish = await reqSpanish.json()\n    let spanish = dataSpanish.body\n\n    return { english, spanish }\n  }\n  render() {\n    const { language } = this.props\n\n    return (\n      <div>\n        <h2>{language}</h2>\n        <div className=\"channels\">\n          {language.map((channel) => (\n            <div key={channel.id}>\n              <Link href={`/channel?id=${channel.id}`}>\n                <a className=\"channel\">\n                  <img\n                    src={channel.urls.logo_image.original}\n                    alt=\"channel logo\"\n                  />\n                </a>\n              </Link>\n              <h2>{channel.title}</h2>\n            </div>\n          ))}\n        </div>\n      </div>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}